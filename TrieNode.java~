import java.util.Vector;

public class TrieNode {

	private Word wordHere;

	private TrieNode[] links;

	public TrieNode() {
		wordHere = null;
		links= new TrieNode[26];
	}

	private int let(char c) {
		return c - 'a';
	}

	private char firstChar(String key) {
		return key.charAt(0);
	}
	
	private String rest(String key) {
		return key.substring(1,key.length());
	}
	
	private TrieNode linkWordStart(String start) {
		return links[let(firstChar(start))];
	}
	
	public void insert(String key,String toHere) {
	    Word word = new Word(toHere,1);
	    TrieNode node = new TrieNode();
	    if (key.length() == 0) {
		if (wordHere == null)
		    wordHere = word;
		else wordHere.addcount();
	    }
	    else {
		if (linkWordStart(key) == null){
		    links[let(firstChar(key))] = node;
		    node.insert(rest(key),toHere);
		}
		else {
		    linkWordStart(key).insert(rest(key),toHere);
		}
	    }	

	}

	
	public Word find(String key) {
		if (key.length() == 0) {
			if (wordHere==null)
				return null;
			else return wordHere;
		}
		else {
			if (linkWordStart(key) == null)
				return null;
			else return linkWordStart(key).find(rest(key));
		}		
	}

	public void allKeyValue(Vector v) {
	    if(wordHere != null){
		v.add(wordHere);
	    }
	for (int i =0; i<26; i++){
		if(links[i] != null){
	links[i].allKeyValue(v);
		}
		}		
	}

	public void spellCheck1(Vector v, String start) {
		
	}
 	public void prefixMatch(Vector v, String start) {
	        if (start.length() == 0) {
			allKeyValue(v);
			}
		else {
			linkWordStart(start).prefixMatch(v,rest(start));
		}			
	}

	public void spellCheck2(Vector ws, String key, int errs) {

	}

	
	public void print(String string) {
            if (wordHere != null)
			System.out.println(string+" "+wordHere);
		else System.out.println(string+" empty");
		for (int i =0; i<26; i++) {
			if (links[i]!=null){
				links[i].print(string+"-");
			}
		}
	}
       public boolean anyKids(String key){
	Vector<Word> v = new Vector();
	links[let(firstChar(key))].allKeyValue(v);
	if(v.isEmpty())	{
	return false;
	  }
	return true;
    		}
       public void deldangling(String key){
	if (key.length() == 0) {
	    return;
	}
	else {
	if(anyKids(key)){
  		linkWordStart(key).deldangling(rest(key));
	}
	else{
	links[let(firstChar(key))] = null;

	   }
        }
     }

       public boolean delete(String key) {
	if(find(key) != null){
	    if (key.length() == 0) {
		    wordHere = null;	
	    }
	    else {	
		linkWordStart(key).delete(rest(key));	    
	    }	
	    return true;
	}
	return false;
      }
}


